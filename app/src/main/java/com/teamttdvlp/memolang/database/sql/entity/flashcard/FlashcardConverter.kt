package com.teamttdvlp.memolang.database.sql.entity.flashcardimport com.teamttdvlp.memolang.model.entity.flashcard.Flashcardimport kotlin.collections.ArrayListobject FlashcardConverter {    fun toCardEntity (card : Flashcard) : FlashCardEntity {        return FlashCardEntity().apply {            id = card.id            createdAt = card.createdAt            translation = card.translation            text = card.text            languagePair = card.languagePair            using = card.example            synonym = card.synonym            kind = card.type            setName = card.setName            pronunciation = card.pronunciation            meanUsing = card.exampleMean        }    }    fun toNormalCard(card : FlashCardEntity) : Flashcard {        return Flashcard(            id = card.id,            createdAt = card.createdAt,            translation = card.translation,            text = card.text,            languagePair = card.languagePair,            example = card.using,            synonym = card.synonym,            type = card.kind,            setName = card.setName,            pronunciation = card.pronunciation,            exampleMean = card.meanUsing        )    }    fun toNormalCardCollection(cards : Collection<FlashCardEntity>) : ArrayList<Flashcard>{        val collection = ArrayList<Flashcard>()        for (card in cards) {            collection.add(toNormalCard(card))        }        return collection    }    fun toCardEntityCollection(cards : Collection<Flashcard>) : ArrayList<FlashCardEntity>{        val collection = ArrayList<FlashCardEntity>()        for (card in cards) {            collection.add(toCardEntity(card))        }        return collection    }}